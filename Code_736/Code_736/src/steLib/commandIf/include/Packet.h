#ifndef _PACKET_H_INCLUDED_H_
#define _PACKET_H_INCLUDED_H_

#include <DataType.h>
#include <SysTime.h>


#define PACKET_HEADER_SIZE		4
#define PACKET_MAX_DATA_PAYLOAD	252
#define PACKET_MAX_CMD_PAYLOAD		172

#define CMDPKT_FIELD_SENDER 	6
#define CMDPKT_FIELD_PACKETTYPE 2
#define CMDPKT_FIELD_RECEIVER	0

#define CMDPKT_MASK_SENDER 		(0x3 << CMDPKT_FIELD_SENDER)
#define CMDPKT_MASK_RECEIVER 	(0x3 <<	CMDPKT_FIELD_RECEIVER)
#define CMDPKT_MASK_PACKETTYPE	(0xF << CMDPKT_FIELD_PACKETTYPE)

//Header structure
typedef struct {
	UINT8		nIdentity;
	UINT8		nCommand;
	UINT8		nSeqNum;
	UINT8		nByteCnt;
} PacketHeader;

//Sender/Source
typedef enum {
	SENDER_IPU 	= 	(0 << CMDPKT_FIELD_SENDER),
	SENDER_FPGA = 	(1 << CMDPKT_FIELD_SENDER),
	SENDER_DSP  = 	(2 << CMDPKT_FIELD_SENDER),
	SENDER_INVALID =(3 << CMDPKT_FIELD_SENDER)
} PacketSender;

//Command/Response/Data
typedef enum {
	DATA_PKT	=						(0 << CMDPKT_FIELD_PACKETTYPE),
	CMD_FROM_SRC =						(1 << CMDPKT_FIELD_PACKETTYPE),
	IMD_ACK_FOR_CMD =					(2 << CMDPKT_FIELD_PACKETTYPE),
	CMD_SUCCESSFULL =					(3 << CMDPKT_FIELD_PACKETTYPE),
	IMD_NAK_FOR_INVALID_DST =			(4 << CMDPKT_FIELD_PACKETTYPE),
	IMD_NAK_FOR_INVALID_SRC =			(5 << CMDPKT_FIELD_PACKETTYPE),
	IMD_NAK_FOR_INVALID_CMD =			(6 << CMDPKT_FIELD_PACKETTYPE),
	IMD_NAK_FOR_INVALID_SEQNUM =		(7 << CMDPKT_FIELD_PACKETTYPE),
	IMD_NAK_FOR_INVALID_LEN =			(8 << CMDPKT_FIELD_PACKETTYPE),
	SPU_RF_COMM_FAILED_SENDER_FPGA =	(9 << CMDPKT_FIELD_PACKETTYPE),
	DXC_TUNING_FAILED_SENDER_FPGA =		(10 << CMDPKT_FIELD_PACKETTYPE),
	DSP_FPGA_COMM_FAILED_SENDER_DSP =	(11 << CMDPKT_FIELD_PACKETTYPE),
	SPU_RESOURCES_NOT_AVAIL_SENDER_DSP =(12 << CMDPKT_FIELD_PACKETTYPE),
	NO_L2_PAYLOAD_SENDER_IPU =			(13 << CMDPKT_FIELD_PACKETTYPE),
	DSP_FPGA_COMM_FAILED_SENDER_IPU =	(14 << CMDPKT_FIELD_PACKETTYPE),
	PACKET_TYPE_INVALID = 				(15 << CMDPKT_FIELD_PACKETTYPE)
} PacketType;

//Receiver/Destination
typedef enum {
	RECEIVER_IPU = 		(0 << CMDPKT_FIELD_RECEIVER),
	RECEIVER_FPGA = 	(1 << CMDPKT_FIELD_RECEIVER),
	RECEIVER_DSP =		(2 << CMDPKT_FIELD_RECEIVER),
	RECEIVER_INVALID = 	(3 << CMDPKT_FIELD_RECEIVER)
} PacketReceiver;

//Commands  
typedef enum {
	DATA_PACKET 						= 0,
	IPU_TO_DSP_SCAN_BEACON_FREQ,
	IPU_TO_DSP_CONFIGURE_RECEIVER,
	IPU_TO_DSP_CONFIGURE_TRANSMITTER,
	IPU_TO_DSP_CONFIGURE_VBTS_MODE,
	IPU_TO_DSP_CONFIG_AREA_JAMMING,
	IPU_TO_DSP_SET_TSC_FOR_RECEIVER,
	IPU_TO_DSP_SET_TSC_FOR_TRANSMITTER,
	IPU_TO_DSP_SET_TSC_FOR_VBTS_MODE,
	IPU_TO_DSP_CHANNEL_MODIFY,
	IPU_TO_DSP_PLAYBACK_START  = 11,
	IPU_TO_DSP_DECODING_START           = 12,
	IPU_TO_DSP_DECODE_IQ_DATA			=14,
	IPU_TO_DSP_CONFIGURE_RECORD_RECEIVER = 15,
	IPU_TO_DSP_STOP_RECORD_RECEIVER,
	IPU_TO_DSP_STOP_SCANING_BAND 		= 32,
	IPU_TO_DSP_STOP_RECEIVER,
	IPU_TO_DSP_STOP_TRANSMITTER,
	IPU_TO_DSP_STOP_VBTS_MODE,
	IPU_TO_DSP_STOP_AREA_JAMMING,
	IPU_TO_DSP_STOP_SCANNING_ARFCN,
	IPU_TO_DSP_STOP_PLAYBACK,
	IPU_TO_DSP_STOP_DECODING,
	IPU_TO_FPGA_SEND_SPU_VERSION		= 64,
	IPU_TO_FPGA_SEND_SPU_STATUS,
	IPU_TO_DSP_START_GPS ,
	IPU_TO_DSP_STOP_GPS,
	IPU_TO_DSP_RF_READ_WRITE,
	DSP_TO_IPU_SEND_L2_PACKET 			= 80,
	DSP_TO_IPU_RATSCCH_MESSAGE,
	DSP_TO_FPGA_CONFIG_SRIO 			= 96,
	DSP_TO_FPGA_RX_TUNE,
	DSP_TO_FPGA_TX_TUNE,
	DSP_TO_FPGA_AREA_JAMMING,
	DSP_TO_FPGA_STOP_AREA_JAMMING,
	DSP_TO_FPGA_DAC_CONFIG,				// 101
	DSP_TO_FPGA_SET_DDC,
	DSP_TO_FPGA_SET_DDC2_CONFIGURATION,
	DSP_TO_FPGA_SEND_STE_OPERATION,
	DSP_TO_FPGA_SEND_DSP_STATUS, //105
	DSP_TO_FPGA_START_GPS,
	DSP_TO_FPGA_SEND_GPS_DATA,
	DSP_TO_FPGA_STOP_GPS,
	DSP_TO_FPGA_REQUEST_HM,
	DSP_TO_FPGA_CONTROL_RF,      //110
	DSP_TO_FPGA_SEND_RF_STATUS,
//	DSP_TO_FPGA_SEND_RF_TEMP,
	DSP_TO_FPGA_SEND_DSP_TEMP,
	DSP_TO_FPGA_REMOTE_UPGRADE 			= 199,
	COMMAND_INVALID
} CommandType;

typedef enum {
	SENDER_ERROR,
	RECEIVER_ERROR,
	PACKET_TYPE_ERROR,
	COMMAND_ERROR,
	PACKET_LEN_ERROR = (PACKET_MAX_DATA_PAYLOAD + 1),
	PACKET_VALID
} PacketStatus;

typedef struct {
	PacketHeader	Header;
	UINT8			nData[PACKET_MAX_CMD_PAYLOAD];
	UINT8			nCommand;
	UINT8			nRxMgr;
	UINT8			nTxMgr;
	UINT8 			nDDCNum;
	UINT8           nCoreno;
	SysTime			oNow;
} Packet;

typedef struct {

	PacketHeader	Header;
	UINT8			nData[PACKET_MAX_DATA_PAYLOAD];
}Packet2;

//RF Board commands for TRS
typedef	enum {
		PA_TMA_3GJammer_RX_TX_enable_disable_status = 11,
				PA_TMA_3GJammer_RX_TX_enable_disable = 43,
				RX_VGA1_Read = 64,
				RX_VGA2_Read,
				RX_VGA3_Read,
				RX_VGA4_Read,
				RX_VGA5_Read,
				RX_VGA6_Read,
				RX_Temp_Read= 70,

				RX_AGC_Status=74,
				RX_PLL_AlertPin_AGC_Status =76,
				RX_VGA1_Write = 96,
				RX_VGA2_Write,
				RX_VGA3_Write,
				RX_VGA4_Write,
				RX_VGA5_Write,
				RX_VGA6_Write,
				RX_Enable_disable_AGC=106


}RfBoardCommands;



#define MAX_L2PACKETS_TO_IPU					1024		
/*******************************************************/
// SHARED DATA MEMORY FOR L2PACKET TO CORE 0
// L2 PACKET from DSP to IPU
typedef struct L2PacketInfo
{
	BOOL	bWrote;
	BOOL	bSkipSend;
	Packet2	*pInfo;
}L2PacketInfo;

typedef struct SharedL2PacketMgr
{
	UINT16			nWriteIndex;	// dynamic
	UINT16			nReadIndex;	// dynamic
	L2PacketInfo	oPayload[MAX_L2PACKETS_TO_IPU];
}SharedL2PacketMgr;



/**************************************************************************/
// STATIC MEMORY ALLOCATION FOR L2PACKET TO IPU
// L2 packet from DSP to IPU
typedef struct L2PacketMgr
{

//	UINT32			nWriteIndex;
	Packet2			oPayloadInfo[MAX_L2PACKETS_TO_IPU];	

}L2PacketMgr;
/************************************************************************/


#endif //_PACKET_H_INCLUDED_H_
