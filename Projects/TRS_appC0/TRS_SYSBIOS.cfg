var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var UIABenchmark = xdc.useModule('ti.uia.events.UIABenchmark');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var C66x_Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var cppi=xdc.loadPackage('ti.drv.cppi');
var qmss=xdc.loadPackage('ti.drv.qmss');
var srio=xdc.loadPackage('ti.drv.srio');
var pa=xdc.loadPackage('ti.drv.pa');
var ti_sysbios_family_c66_tci66xx_CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var exception = xdc.useModule('ti.sysbios.family.c64p.Exception');
exception.enablePrint = true;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x8000; 

var HeapMem                     =   xdc.useModule('ti.sysbios.heaps.HeapMem');

/* This is the default memory heap. */
var heapMemParams2              =   new HeapMem.Params;
heapMemParams2.size             =   256*1024;
heapMemParams2.sectionName      =   "systemheap";
heapMemParams2.align			=	128;
Program.global.heap1            =   HeapMem.create(heapMemParams2);
Memory.defaultHeapInstance      =   Program.global.heap1;
Program.sectMap["systemheap"]   =   "C0_DATA_RAM";  


/* Create a Heap for Ethernet Data in Multicore Shared RAM*/ 
var heapMemParams3              		=   new HeapMem.Params;
heapMemParams3.size             		=   384*128; //due to cache line size (128 * 3)
heapMemParams3.sectionName      		=   "ethernetmemorybuffer";
heapMemParams3.align					=	128;
Program.global.heap2            		=   HeapMem.create(heapMemParams3);
Program.sectMap["ethernetmemorybuffer"] = 	"C0_NON_CACHE";


/* Memory map */
Program.sectMap[".dataL1D"] 					= "L1D_RAM";
Program.sectMap[".text"] 						= "L2RAM"; 
Program.sectMap[".const"] 						= "L2RAM"; 
Program.sectMap[".qmss"] 						= "C0_NON_CACHE"; 
Program.sectMap[".cppi"] 						= "C0_NON_CACHE";
Program.sectMap[".hostregion"]   				= "C0_NON_CACHE";
Program.sectMap[".srioSharedMem"] 				= "C0_NON_CACHE";
Program.sectMap[".dataL2"] 						= "L2RAM";
Program.sectMap[".far"] 						= "C0_DATA_RAM";
Program.sectMap[".SrioSlaveBuff"] 				= "MSMCSRAM";
Program.sectMap[".critical_section_reference"] 	= "CX_CRITICAL_SECTION_REFERENCE";
Program.sectMap[".critical_section"] 			= "CX_CRITICAL_SECTION";
Program.sectMap[".fasttext:"] 					= "L2RAM";
Program.sectMap[".csl_vect"] 					= "L2RAM";
Program.sectMap[".vectors"] 					= "L2RAM";
Program.sectMap[".printf"] 						= "C0_DATA_RAM";
Program.sectMap[".switch:"] 					= "C0_DATA_RAM";
Program.sectMap[".cio:"] 						= "C0_DATA_RAM";
Program.sectMap[".delcomObj"]	 				= "C0_DATA_RAM";
Program.sectMap[".cinit:"] 						= "L2RAM";
Program.sectMap[".pinit"] 						= "C0_DATA_RAM";
Program.sectMap[".ddrdata"] 					= "C0_NON_CACHE";
Program.sectMap[".textL1P"] 					= "L1P_RAM";
Program.sectMap[".nocache"]		 				= "C0_NON_CACHE";


Task.defaultStackSection 			= ".far:taskStackSection";
Task.idleTaskStackSection 			= ".far:taskStackSection";
Task.defaultStackSize 				= 2048;
Program.sectMap[".far:taskStackSection"]= "C0_DATA_RAM";

BIOS.libType = BIOS.LibType_Custom;
BIOS.swiEnabled = true;
/**** Modules For SYSBIOS IPC and MessageQ *****/

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

/*
 *  Get the list of names that the build device supports.
 *  I.e. ["CORE0", "CORE1", "CORE2" ... ]
 */
//var nameList = MultiProc.getDeviceProcNames();

/* 
*  Since this is a single-image example, we don't (at build-time) which 
 *  processor we're building for.  We therefore supply 'null' 
 *  as the local procName and allow IPC to set the local procId at runtime.
 */
MultiProc.setConfig("CORE0",["CORE0", "CORE1", "CORE2", "CORE3", "CORE4", "CORE5", "CORE6", "CORE7"]);

/* Modules explicitly used in the application */
var MessageQ    = xdc.useModule('ti.sdo.ipc.MessageQ');
//MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmNotifySetup');
MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmCircSetup');


var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
//var Notify 		= xdc.useModule('ti.sdo.ipc.Notify');
var GateMP = xdc.useModule('ti.sdo.ipc.GateMP');

//Notify.SetupProxy = xdc.useModule('ti.sdo.ipc.family.c647x.NotifyCircSetup');
Ipc.procSync = Ipc.ProcSync_ALL;

var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.translate = false;

SharedRegion.setEntryMeta(0,
    { base: 0x82000000, 
      len:  0x00400000,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      name: "Heap0",
    });


SharedRegion.setEntryMeta(1,
    { base: 0x82400000, 
      len:  0x00400000,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      name: "Heap1",
    });
    
SharedRegion.setEntryMeta(2,
    { base: 0x82800000, 
      len:  0x00400000,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      name: "Heap2",
    });

SharedRegion.setEntryMeta(3,
    { base: 0x82C00000, 
      len:  0x00400000,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      name: "Heap3",
    });
BIOS.clockEnabled = false;
